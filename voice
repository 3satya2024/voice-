<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="A fully responsive Text-to-Speech tool with dynamic functionality, including speech recording and download options.">
    <meta name="keywords" content="Text-to-Speech, TTS, responsive, SEO, Google AdSense, record speech, download audio">
    <meta name="author" content="Your Name">
    <title>Responsive Text-to-Speech Tool</title>
    <style>
        /* CSS for Responsiveness */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            background-color: #f4f4f4;
        }

        header {
            background-color: #333;
            color: white;
            padding: 1rem;
            width: 100%;
            text-align: center;
        }

        main {
            flex: 1;
            width: 100%;
            max-width: 800px;
            padding: 1rem;
        }

        #tts-section {
            background-color: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        #text-input {
            width: 100%;
            height: 150px;
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #controls {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        #controls label, #controls select, #controls button {
            margin: 0.25rem 0;
        }

        #speak-button, #record-button, #stop-button, #cancel-button, #download-button {
            padding: 0.5rem 1rem;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #speak-button:hover, #record-button:hover, #stop-button:hover, #cancel-button:hover, #download-button:hover {
            background-color: #0056b3;
        }

        #stop-button, #cancel-button, #download-button {
            display: none; /* Hidden by default */
        }

        #ad-section {
            margin-top: 2rem;
            text-align: center;
        }

        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 1rem;
            width: 100%;
        }
    </style>
</head>
<body>
    <header>
        <h1>Responsive Text-to-Speech Tool</h1>
    </header>

    <main>
        <!-- Text-to-Speech Section -->
        <section id="tts-section">
            <textarea id="text-input" placeholder="Enter text here..."></textarea>
            <div id="controls">
                <label for="speech-level">Speech Level:</label>
                <select id="speech-level">
                    <option value="0.5">Slow</option>
                    <option value="1" selected>Normal</option>
                    <option value="1.5">Fast</option>
                </select>
                <label for="voice-select">Voice:</label>
                <select id="voice-select"></select>
                <label for="format-select">Download Format:</label>
                <select id="format-select">
                    <option value="wav">WAV</option>
                    <option value="ogg">OGG</option>
                </select>
                <button id="speak-button">Convert to Speech</button>
                <button id="record-button">Record Speech</button>
                <button id="stop-button">Stop Recording</button>
                <button id="cancel-button">Cancel Recording</button>
                <button id="download-button">Download Recording</button>
            </div>
        </section>

        <!-- Ad Section -->
        <section id="ad-section">
            <!-- Google AdSense Ad Slot -->
            <div id="ad-slot-1">
                <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX"
                crossorigin="anonymous"></script>
                <!-- Responsive Ad Unit -->
                <ins class="adsbygoogle"
                    style="display:block"
                    data-ad-client="ca-pub-XXXXXXXXXXXXXXXX"
                    data-ad-slot="XXXXXXXXXX"
                    data-ad-format="auto"
                    data-full-width-responsive="true"></ins>
                <script>
                    (adsbygoogle = window.adsbygoogle || []).push({});
                </script>
            </div>
        </section>
    </main>

    <footer>
        <p>&copy; 2023 Your Company. All rights reserved.</p>
    </footer>

    <script>
        // JavaScript for Dynamic Functionality
        const textInput = document.getElementById('text-input');
        const speechLevel = document.getElementById('speech-level');
        const voiceSelect = document.getElementById('voice-select');
        const formatSelect = document.getElementById('format-select');
        const speakButton = document.getElementById('speak-button');
        const recordButton = document.getElementById('record-button');
        const stopButton = document.getElementById('stop-button');
        const cancelButton = document.getElementById('cancel-button');
        const downloadButton = document.getElementById('download-button');

        let mediaRecorder;
        let audioChunks = [];
        let audioBlob;

        // Load available voices
        function loadVoices() {
            const voices = window.speechSynthesis.getVoices();
            voiceSelect.innerHTML = voices
                .map(voice => `<option value="${voice.name}">${voice.name} (${voice.lang})</option>`)
                .join('');
        }

        // Speak functionality
        speakButton.addEventListener('click', () => {
            const text = textInput.value;
            const rate = parseFloat(speechLevel.value);
            const voiceName = voiceSelect.value;
            const voices = window.speechSynthesis.getVoices();
            const voice = voices.find(v => v.name === voiceName);

            if (text.trim() !== "") {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.rate = rate;
                utterance.voice = voice;
                window.speechSynthesis.speak(utterance);

                // Change button text to "Completed"
                speakButton.textContent = "Completed";
                speakButton.disabled = true;

                // Reset button after speech is done
                utterance.onend = () => {
                    speakButton.textContent = "Convert to Speech";
                    speakButton.disabled = false;
                };
            } else {
                alert("Please enter some text to speak.");
            }
        });

        // Record functionality
        recordButton.addEventListener('click', async () => {
            const format = formatSelect.value;
            const mimeType = format === 'wav' ? 'audio/wav' : 'audio/ogg';

            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream, { mimeType });
                mediaRecorder.start();
                recordButton.style.display = 'none';
                stopButton.style.display = 'inline-block';
                cancelButton.style.display = 'inline-block';

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = () => {
                    audioBlob = new Blob(audioChunks, { type: mimeType });
                    downloadButton.style.display = 'inline-block'; // Show download button
                    audioChunks = [];
                };
            } catch (error) {
                console.error("Error accessing microphone:", error);
                alert("Error accessing microphone. Please ensure you have granted microphone permissions.");
            }
        });

        // Stop functionality
        stopButton.addEventListener('click', () => {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
                stopButton.style.display = 'none';
                cancelButton.style.display = 'none';
                recordButton.style.display = 'inline-block';
            }
        });

        // Cancel functionality
        cancelButton.addEventListener('click', () => {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
            }
            stopButton.style.display = 'none';
            cancelButton.style.display = 'none';
            recordButton.style.display = 'inline-block';
            audioChunks = []; // Clear recorded data
            alert("Recording canceled.");
        });

        // Download functionality
        downloadButton.addEventListener('click', () => {
            if (audioBlob) {
                const format = formatSelect.value;
                const audioUrl = URL.createObjectURL(audioBlob);
                const a = document.createElement('a');
                a.href = audioUrl;
                a.download = `recording.${format}`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(audioUrl);
            } else {
                alert("No recording available to download.");
            }
        });

        // Load voices when the page loads
        window.speechSynthesis.onvoiceschanged = loadVoices;
        loadVoices();
    </script>
</body>
</html>
